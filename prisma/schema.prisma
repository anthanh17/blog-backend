// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt         @id @default(autoincrement())
  email     String         @unique @db.VarChar(50)
  username  String         @unique @db.VarChar(20)
  password  String         @db.Char(64)
  telephone String?        @unique @db.VarChar(20)
  role      String         @db.Char(10)
  profile   String?        @db.Text
  subscribe Boolean
  posts     PostsOnUsers[]
  comments  Comment[]
}

model Post {
  id         BigInt              @id @default(autoincrement())
  title      String              @unique @db.VarChar(100)
  content    String              @db.Text
  media      String?             @db.Text
  views      Int
  likes      Int
  mask       Boolean
  slug       String              @db.VarChar(20)
  users      PostsOnUsers[]
  categories CategoriesOnPosts[]
  comments   Comment[]
}

model PostsOnUsers {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId BigInt
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId BigInt

  @@id([userId, postId])
}

model Category {
  id        Int                 @id @default(autoincrement()) @db.UnsignedSmallInt
  user_name String              @db.VarChar(50)
  slug      String              @db.VarChar(20)
  posts     CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     BigInt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int      @db.UnsignedSmallInt

  @@id([postId, categoryId])
}

model Comment {
  id              BigInt  @id @default(autoincrement())
  parentCommentId BigInt
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          BigInt
  post            Post    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId          BigInt
  content         String  @db.Text
  mask            Boolean
}
